\chapter[序言]{序言}\marginpar{\fbox{1}}
我想起我的兄弟Todd，他正從硬體領域大躍進到程式設計領域。
基因工程將是下一個大革命的戰場。

我們將擁有許多被設計用來製造食物、燃料、塑膠的各類微生物；這些微生物的出現，
可以免去污染，讓我們僅付出遠少於現今所付的代價，便足以主宰整個物質世界。
我原以為，這場革命規模之大，將使電腦革命相形見絀。

然而，後來，我發覺我犯了科幻作家所犯的同樣錯誤：對科技的迷失
(當然，這在科幻小說中屢見不鮮)。有經驗的作家都知道，故事的重點不在技術，
而在於人。基因工程無疑會對我們的生活造成極大衝擊，
但是我不確定它是否會阻礙電腦革命(電腦革命也帶動了基因工程的到來)
或至少說是資訊革命。所謂資訊，關注的是人際之間的溝通。是的，車子、鞋子、
尤其是基因治療，都很重要，但這些東西最終都和陷阱沒什麼兩樣。
人類與世界共處的方式，才是真正關鍵所在。而這其中，溝通居重要角色。

本書是一個例子。大多數人認為我很大膽、或者說有點瘋狂，因為我把所有材料都放上了
Web。「那麼，還有什麼購買理由呢？」他們這樣問我。 如果我的性格保守謹慎一些，
我就不會這麼做了。但是我真的不想再用同樣老舊的方式來撰寫一本新的電腦書籍。
我不知道會發生什麼事，但事實證明，這是我對書籍所做過的最棒的一件事。

首先，人們開始把校正結果送回。這是個讓人驚嘆的過程，因為人們仔細端詳每個角落、
每個縫隙，揪出技術上和文法上的種種錯誤，讓我得以更進一步消除所有毛病，
而這些毛病原本是被我遺漏未察的。人們往往對這種作法表示驚恐，
他們常常說「唔，我不確定我這麼做是否過於吹毛求疵...」，然後扔給我一大堆錯誤。
我發誓，我自己從未曾察覺這些錯誤。 我很喜歡這種群體參與的過程，
這個過程也使這本書更加獨特。

但是，\marginpar{\fbox{2}} 接著我開始聽到「嗯，很好。
整個電子版都能夠放到網絡上實在不錯，可是我希望擁有出版商印出來的、
裝訂成冊的紙本。」我曾經努力讓每個人能夠更輕鬆地以美觀的方式把它印出來，
但這麼做似乎還是無法滿足要求此書付梓的強大呼聲。
大部份人都不希望在電腦螢幕上讀完一整本書，也不希望總是拖著一捆捆的紙。
即便這些紙張印刷再美觀，對他們來說也不具半點吸引力
(而且我想雷射印表機的碳粉也不便宜)。即使是電腦革命，似乎也難以削減出版商的生意。
不過，某個學生提出了一種看法，他認為這也許會成為未來的一種出版模型：先在
Web 上公開書籍內容，只有在吸引了足夠關注時，才考慮製作紙本形式。目前，
絕大多數書籍都不賺錢，這種作法或許可以讓整個出版產業更有利潤一些。

這本書以另一種形式對我產生了啟迪。一開始我把Java 定位在
「只不過是另一個程式語言」。從許多角度看的確如此。但是隨著時間流逝，對Java
的學習日深，我開始明白這個程式語言的最根本目的，和其他我所見過的程式語言有著極大的不同。

程式設計，就是對複雜度的控管。複雜度包括：待解問題的複雜度和底層機器的複雜度。
因為有著這樣子的複雜度，所以大多數程式開發專案都失敗了。到目前為止，
所有我所知道的程式語言，沒有一個竭盡所能地將主要設計目標鎖定在
「克服程式發展與維護過程中的種種複雜度」上\footnote{在此第二版中,
我要收回這句話。我相信，Python 語言極為逼近這個目標。請參考 www.Python.org。}。
當然，許多程式語言當初設計時也曾將複雜度考慮進去，
但是總有被視為更本質的問題混雜進來。毫無疑問，
那些問題也都是會讓語言使用者一籌莫展的問題。舉例來說，C++回溯相容於
C(俾使熟悉C 的程式員得以比較\marginpar{\fbox{3}}輕鬆地跨越門檻)，
並具備高執行效率的優點。這兩個特性都是大有幫助的目標，並擔負起
C++成敗的重責大任。不過，兩者也帶來了額外的複雜度，使得某些專案無法完成。
(通常你可以將此點歸罪於程式開發人員或管理人員，
不過如果某個語言可以協助我們捕捉錯誤，何樂不為？)
Visual Basic(VB)是另一個例子，它被BASIC 這個「其實不以擴充性為設計目標」
的語言侷限住，使得所有強硬堆累於VB 之上的擴充功能，
都造成了可怕至極且難以維護的語法。Perl 也回溯相容於Awk、Sed、
Grep、以及其他諸般它想取代的Unix 工具，於是衍生出諸如「能寫卻不能讀」的程式碼
(write-only code)這種指責(意思是，寫完數個月之後，你便無法閱讀它)。另一方面，
C++、VB、Perl、Smalltalk 之類的程式語言，都在複雜度議題上有著相當程度的著墨，
十分成功地解決了某些類型的問題。

當我了解Java 之後，最叫我感動的，莫過於Java 似乎把「為程式員降低複雜度」
做為一個堅定的目標。就好像是說：『我們的唯一考量，
就是要降低穩固程式碼的產生時間和困難度』。早期，
這個目標只開花結果於程式碼的撰寫上，
但這些程式碼卻無法執行得很快(雖然目前有許多保證， 承諾
Java 總有一天能夠執行得多快多快)。但是Java 的確出人意表地大幅縮短了發展時間；
比起發展等價的C++ 程式來說，大概只需一半或甚至更少時間。光是這個結果，
就足以省下驚人的時間與金錢。不過，Java 並未停止腳步。Java 繼續將多執行緒、
網絡程式設計等等複雜而益形重要的工作包裝起來。透過語言本身的性質以及程式庫
(libraries)，有時能夠使這些工作變得輕而易舉。最後一點，
Java 著眼於某些有著極高複雜度的問題：跨平台程式、動態程式碼改變、安全議題，
其中每一個問題都能夠套用在整個複雜度頻譜的任何一點上。
所以儘管有著眾所周知的效率問題， Java 帶來的保證卻是很棒的：
可以讓我們成為具有高生產力的程式開發者。

我所見到的種種巨幅改變，有一些是發生在Web 身上。
網絡程式設計一直都不是件簡單的事，但是Java 把它變簡單了
(而Java 語言設計者仍舊繼續努力使它變得更簡單)。網絡程式設計所討論的，
便是讓我們以更有效率、成本更低的方式，和其他人通訊，超越舊式電話媒介
(單是電子郵件\marginpar{\fbox{4}}便已經革命性地改變了許多事情)。
當我們能夠在與他人溝通這件事情上著力更多，神奇的事情便會開始發生，
或許甚至比基因工程所許諾的遠景，更讓人感到神奇。

透過所有努力 - 程式開發、團隊開發、使用者介面的打造(讓程式可以和使用者互動)、
跨平台的執行、跨Internet(網際網、互聯網)通訊程式開發的大量簡化 - Java 擴展了
「人際之間」的通訊頻寬。我認為，
通訊革命的成果或許不應只是圍繞在傳輸頻寬提高後所產生的效率上打轉；
我們將會看到貨真價實的革命，因為我們能夠更輕鬆地和其他人溝通：
可以是一對一的形式、可以是群體通訊的形式、也可以是和全地球人通訊的形式。
我曾經聽人主張，接下來的革命會是一種全球意志的形成，
來自於足夠數量的人們和足夠數量的相互聯繫。Java 可能是、
也可能不是點起這把撩原之火的星焰，但至少存在著可能。這使我覺得，
這個語言的教學是一件有意義的事。


%\addcontentsline{toc}{section}{第二版序}
\section{第二版序}

關於本書的第一版，人們給了我許多許多精彩的意見。我當然對此感到非常愉快。
不過有時候讀者也有抱怨。一個常常被提起的抱怨便是：這本書太大了。對我來說，
如果「頁數過多」的確是你唯一的怨言，那真是一個讓人無言以對的責難。
(這讓人想起奧地利皇帝對莫札特作品的非難： 『音符太多了！』
當然我並不是將自己拿來和莫札特相提並論)我只能夠假設，
這樣的怨言出自於一個「被塞進太多Java 語言的廣闊內容，
而還未看過其他相同主題的書籍」的人。就拿我最喜歡的一本參考書來說好了，
它是Cay Horstmann 和Gary Cornell 合著的《Core Java》(Prentice - Hall 出版)，
其規模甚至大到必須拆成兩冊。儘管如此，在這一 (第二) 版中，我努力嘗試的事情之一，
便是修剪過時的內容，或至少不是那麼必要的內容。這麼做我覺得很自在，
因為原先內容仍然擺在網站 www.BruceEckel.com 上，
而且本書所附光碟中也有第一版的內容。

如果你想取得原本內容，\marginpar{\fbox{5}} 沒有任何問題，
這對作者而言也是一種欣慰。舉個例子，您可能會發現第一版的最後一章「專案
(Projects)」已不復存在；有兩個專案被整合到其他章節裡頭，
因此剩餘部份也就變得不再適合存在。同樣的，「設計樣式
(Design Patterns)」這一章的內容變得更豐富了，因此也獨立成冊了
(可自我的網站下載)。基於這些原因，本書理應變得苗條一些。

事實卻非如此。

最大的問題是，Java 語言本身仍在持續發展當中，
企圖為所有可能用到的東西提供標準化介面，因此 API 的數量不斷擴增。所以就算看到
JToaster 這樣的API 出現，我也不會吃驚) (譯註：toaster 是烤麵包機，JToaster
意指標準化的烤麵包機類別。連烤麵包機都有標準類別，藉此誇飾 Java 2
所涵蓋的類別的廣泛程度)。「涵蓋所有API」似乎逾越本書範圍，應該交給其他作者完成，
但儘管如此，仍然有某些議題難以略去。伺服端 Java (主要是 Servlets 和
Java Server pages，JSPs)便是這些議題中涵蓋最廣的一個。伺服端 Java 無疑為
WWW 的諸多問題提供了出色的解決方案。
尤其當我們發現「現存許多不同的 Web 瀏覽器平台，
無法提供一致的用戶端程式開發」時，更顯其重要性。此外
Enterprise Java Beans(EJBs)的問世，也讓人們希望更輕易地發展資料庫連結、
交易處理、安全考量。這些問題在本書第一版本中通通被放進「網絡程式設計」一章。
本版則改用了一個對每個人來說都愈來愈不可或缺的名稱：「分佈式計算」。
你還會發現，本書同時也將觸角伸至Jini(讀作genie，這真的只是個名字，
不是什麼字首縮寫)的概要性說明。
此一尖端技術讓我們重新思考應用程式之間的接駁形式。當然，本書所有內容都已改用
Swing 這個 GUI 程式庫。再次提醒你， 如果你想要取得原有的 Java 1.0/1.1 書籍內容，
可自 www.BruceEckel.com 免費下載
(網站上同時也包含第二版書附光碟的內容；新的材料還會陸續增加)。

本書不但新增的少數 Java 2 語言特性，也徹頭徹尾地翻修了一遍。
最主要的改變是第九章的群集(collection)，我將重點改放在Java 2 的群集，
並修繕本章內容，更深入鑽進某些更重要的群集議題之中，尤其是對 hash function
(雜湊函式)運作方式的討論。此外還有其他一些變動，
包括重寫\marginpar{\fbox{6}}第一章，抽掉部份附錄以及我認為新版不再需要的內容。
整體而言，我重新審閱所有內容，移去第二版中不再需要的部份
(但仍保留它們的電子版於我的網站上)，並將新的更動加入，
然後儘可能改進我能夠改進的所有地方。這種大變動是由於語言本身持續有所變化 -
即使不再像以前那麼大刀闊斧。以此觀之，毫無疑問，本書還會有新版面世。

對那些吃不消本書厚度的讀者們，我向你們致歉。不管你們是否相信，
我真的傾盡全力地想辦法讓這本書更輕薄。儘管體積依舊龐大，
我認為有其他令你滿足的方式。本書也有電子版形式
(不論是從網站取得，或是從本書所附光碟取得)，你可以帶著你的筆記電腦，
把這本電子書放進去，不增加絲毫重量。如果你希望更輕便地閱讀，
也可以找到四處流傳的 Palm Pilot 版
(有人跟我說，他總是躺在床上以Palm 閱讀本書內容，並打開背光裝置
(譯註：Palm PDA 上一種用於夜間燈光不足時的顯示模示)以免打擾太太。
我想這應該有助於讓他早點進入夢鄉)。如果你一定得在紙上閱讀，
我知道有些人一次印出一章，然後帶在公事包裡頭，在電車上閱讀。
\subsection{Java 2}
本書撰寫之際，Sun 即將發行Java Development Kit(JDK)1.3，並預告 JDK 1.4
將有的更動。雖然這些版本的主號碼還停留在1，但是 ``Java2'' 卻是
JDK 1.2 及其後續版本的標準名稱。這突顯了介於「老式Java」
(其中有許多本書第一版中抱怨過的缺點)與新版本之間的重大差異。
在這些更新更精進的新版本中，缺點變少了，加入了許多新特性和美妙的設計。

本書是為Java2 而寫。能夠擺脫過去的陳舊內容，重新以更新的、更精進的語言來寫作，
這個事實給我憑添許多樂趣。舊有的資訊依舊存於網站上的第一版電子書及光碟中，
如果你使用Java 2 之前的版本，便可拿它們來參考。由於每個人都可以自
java.sun.com 免費下載JDK，所以就算我\marginpar{\fbox{7}}以 Java 2 撰寫本書，
也不會讓讀者為了升級而付出金錢。

不過，還是有點小麻煩，這是因為 JDK 1.3 提供了某些我想用到的改進功能，
而目前 Linux 上正式發行的版本只到JDK1.2.2 。Linux ( 見 www.Linux.org) 是個和
Java 關聯極深的重要開發環境。Linux 正以極高的速度成為最重要的伺服器平台，快速、
穩定、強固、安全、容易維護， 而且免費，的確是電腦史上的革命
(我不認為可以在過去任何工具上同時看到這些特色)。 Java
則在伺服端找到了極為關鍵的利基所在，也就是 Servlets 這個為傳統 CGI
程式設計帶來巨大改進效應的新技術(本主題含括於「分佈式計算」一章)。

所以，雖然我想完全使用最新功能，但是讓每一個程式都在Linux 上順利編譯，
對我而言至關重要。當你解開本書原始碼檔案，並在Linux 上以最新的 JDK 進行編譯，
你會發現所有程式應該都能夠順利完成。然而你會看到我四處放置的有關 JDK 1.3
的註記。

\section{書附光碟}
這個(第二)版本提供了一份紅利：附於書後的光碟。
過去我不想將光碟放在我所撰寫的書籍後面，原因是我覺得，為了大小僅數百
K bytes 的原始碼，用了那麼大一片光碟，實在說不過去。
我傾向於讓讀者從我的網站下載這些東西。但是現在，你看到了，
本書所附的光碟大有不同。

這片光碟當然包含了本書所有原始碼，此外還包含本書完整內容的多種電子形式。
我最喜歡HTML 格式，不但速度快，索引也十分完備 - 只要在索引或目錄上按下某個項目，
馬上就可以跳到你想閱讀的地點。

整張光碟有著超過 300 Mega 的滿滿內容，
是一個名為《Thinking in C Foundations for C++ \& Java》的全多媒體課程
。我原本委託 Chuck Allison 製作這張光碟，是希望做成一個獨立產品。
但後來決定將它放在\marginpar{\fbox{8}} 《Thinking in C++》 和
《Thinking in Java》 兩本書的第二版中，因為持續有一些尚未具足
C 語言背景的人來上我的研討課程，他們認為：『我是個聰明的傢伙，我不想學
C，只想學 C++或 Java，所以我直接跳過C，進到 C++/Java 裡頭。』加入研討班後，
這些人才逐漸了解，認識基本的 C 語法，是多麼重要。將光碟片納入本書，
我便可以確信，每個人都能夠在準備充裕的情形下參加我的研討課程。

這份光碟同時也讓本書得以迎合更多讀者的喜好。
即使本書第三章「程式流程的控制」已經涵蓋了取自 C 核心部份的
Java 相關語法，這張光碟仍然是一份很好的導引。
它所假設的學員基礎也比本書寬鬆許多。希望這張光碟的附上，
能夠使愈來愈多的人被帶領進入Java 程式設計的大家庭。
